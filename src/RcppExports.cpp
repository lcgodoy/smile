// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// single_matern
double single_matern(double d, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_single_matern(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern(d, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_matern3
double single_matern3(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_matern3(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern3(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_matern5
double single_matern5(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_matern5(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern5(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_exp
double single_exp(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_exp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_exp(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// mat_cov
arma::mat mat_cov(const arma::mat& dists, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_mat_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_cov(dists, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// comp_mat_cov
arma::mat comp_mat_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_comp_mat_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_mat_cov(cross_dists, n, n2, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_pexp
double single_pexp(double d, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_single_pexp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_pexp(d, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// pexp_cov
arma::mat pexp_cov(const arma::mat& dists, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_pexp_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(pexp_cov(dists, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// comp_pexp_cov
arma::mat comp_pexp_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double kappa);
RcppExport SEXP _smile_comp_pexp_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_pexp_cov(cross_dists, n, n2, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_gauss
double single_gauss(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_gauss(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gauss(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// gauss_cov
arma::mat gauss_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _smile_gauss_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_gauss_cov
arma::mat comp_gauss_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _smile_comp_gauss_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_gauss_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_spher
double single_spher(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_spher(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_spher(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// spher_cov
arma::mat spher_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _smile_spher_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(spher_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_spher_cov
arma::mat comp_spher_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _smile_comp_spher_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_spher_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// eucl_aux
double eucl_aux(double x, double y);
RcppExport SEXP _smile_eucl_aux(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(eucl_aux(x, y));
    return rcpp_result_gen;
END_RCPP
}
// distmat
arma::mat distmat(const arma::mat& my_mat);
RcppExport SEXP _smile_distmat(SEXP my_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type my_mat(my_matSEXP);
    rcpp_result_gen = Rcpp::wrap(distmat(my_mat));
    return rcpp_result_gen;
END_RCPP
}
// crossdist
arma::mat crossdist(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _smile_crossdist(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist(x, y));
    return rcpp_result_gen;
END_RCPP
}
// haus_aux
double haus_aux(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _smile_haus_aux(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(haus_aux(x, y));
    return rcpp_result_gen;
END_RCPP
}
// haus_aux_cross
double haus_aux_cross(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _smile_haus_aux_cross(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(haus_aux_cross(x, y));
    return rcpp_result_gen;
END_RCPP
}
// dist_haus
arma::mat dist_haus(const List& poly_list);
RcppExport SEXP _smile_dist_haus(SEXP poly_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type poly_list(poly_listSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_haus(poly_list));
    return rcpp_result_gen;
END_RCPP
}
// cdist_haus
arma::mat cdist_haus(const List& poly_list, const arma::mat& pred_mat);
RcppExport SEXP _smile_cdist_haus(SEXP poly_listSEXP, SEXP pred_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type poly_list(poly_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pred_mat(pred_matSEXP);
    rcpp_result_gen = Rcpp::wrap(cdist_haus(poly_list, pred_mat));
    return rcpp_result_gen;
END_RCPP
}
// cdist_haus_lists
arma::mat cdist_haus_lists(const List& poly_list, const List& poly_pred);
RcppExport SEXP _smile_cdist_haus_lists(SEXP poly_listSEXP, SEXP poly_predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type poly_list(poly_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type poly_pred(poly_predSEXP);
    rcpp_result_gen = Rcpp::wrap(cdist_haus_lists(poly_list, poly_pred));
    return rcpp_result_gen;
END_RCPP
}
// single_dists
List single_dists(const List& mat_list);
RcppExport SEXP _smile_single_dists(SEXP mat_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list(mat_listSEXP);
    rcpp_result_gen = Rcpp::wrap(single_dists(mat_list));
    return rcpp_result_gen;
END_RCPP
}
// mult_dists
List mult_dists(const List& mat_list1, const List& mat_list2, const bool& return_single);
RcppExport SEXP _smile_mult_dists(SEXP mat_list1SEXP, SEXP mat_list2SEXP, SEXP return_singleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list1(mat_list1SEXP);
    Rcpp::traits::input_parameter< const List& >::type mat_list2(mat_list2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type return_single(return_singleSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_dists(mat_list1, mat_list2, return_single));
    return rcpp_result_gen;
END_RCPP
}
// pred_cdist
List pred_cdist(const List& mat_list, const arma::mat& pred_mat);
RcppExport SEXP _smile_pred_cdist(SEXP mat_listSEXP, SEXP pred_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pred_mat(pred_matSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_cdist(mat_list, pred_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smile_single_matern", (DL_FUNC) &_smile_single_matern, 4},
    {"_smile_single_matern3", (DL_FUNC) &_smile_single_matern3, 3},
    {"_smile_single_matern5", (DL_FUNC) &_smile_single_matern5, 3},
    {"_smile_single_exp", (DL_FUNC) &_smile_single_exp, 3},
    {"_smile_mat_cov", (DL_FUNC) &_smile_mat_cov, 4},
    {"_smile_comp_mat_cov", (DL_FUNC) &_smile_comp_mat_cov, 6},
    {"_smile_single_pexp", (DL_FUNC) &_smile_single_pexp, 4},
    {"_smile_pexp_cov", (DL_FUNC) &_smile_pexp_cov, 4},
    {"_smile_comp_pexp_cov", (DL_FUNC) &_smile_comp_pexp_cov, 6},
    {"_smile_single_gauss", (DL_FUNC) &_smile_single_gauss, 3},
    {"_smile_gauss_cov", (DL_FUNC) &_smile_gauss_cov, 3},
    {"_smile_comp_gauss_cov", (DL_FUNC) &_smile_comp_gauss_cov, 5},
    {"_smile_single_spher", (DL_FUNC) &_smile_single_spher, 3},
    {"_smile_spher_cov", (DL_FUNC) &_smile_spher_cov, 3},
    {"_smile_comp_spher_cov", (DL_FUNC) &_smile_comp_spher_cov, 5},
    {"_smile_eucl_aux", (DL_FUNC) &_smile_eucl_aux, 2},
    {"_smile_distmat", (DL_FUNC) &_smile_distmat, 1},
    {"_smile_crossdist", (DL_FUNC) &_smile_crossdist, 2},
    {"_smile_haus_aux", (DL_FUNC) &_smile_haus_aux, 2},
    {"_smile_haus_aux_cross", (DL_FUNC) &_smile_haus_aux_cross, 2},
    {"_smile_dist_haus", (DL_FUNC) &_smile_dist_haus, 1},
    {"_smile_cdist_haus", (DL_FUNC) &_smile_cdist_haus, 2},
    {"_smile_cdist_haus_lists", (DL_FUNC) &_smile_cdist_haus_lists, 2},
    {"_smile_single_dists", (DL_FUNC) &_smile_single_dists, 1},
    {"_smile_mult_dists", (DL_FUNC) &_smile_mult_dists, 3},
    {"_smile_pred_cdist", (DL_FUNC) &_smile_pred_cdist, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_smile(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
